openapi: 3.0.3
info: 
  title: TrendsTalk Blog API
  description: TrendsTalk Blog API offers a suite of powerful features designed to streamline your blogging experience. From user registration to post creation and exploration, our API provides robust functionality to cater to your blogging needs.
  version: 1.0.0
  contact:
    email: ckamsi04@gmail.com
servers:
  - url: http://localhost:3000/api/v1
  - url: https://carxperto.onrender.com/api/v1

schemes: [http,https]

tags:
  - name: auth
  - name: seller
  - name: car

paths:
  # Auth routes
  /auth/register:
    post:
      tags:
        - auth
      summary: Provide basic information for user registration
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: object
              required:
                - email
                - password
                - username
                - fullname
              properties:
                username:
                  type: string
                  description: A unique username for authentication
                password:
                  type: string
                  description: A secure password for authentication
                email:
                  type: string
                  description: A unique email for authentication
                fullname:
                  type: string
                  description: First and Lastname of the user
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
        '500':
          description: Internal Server Error
  /auth/login:
    post:
      tags:
        - auth
      summary: Provide basic information for user login
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: object
              required:
                - email
                - password
              properties:
                password:
                  type: string
                  description: A secure password for authentication
                email:
                  type: string
                  description: A unique email for authentication
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
        '500':
          description: Internal Server Error  
  /auth/get_current_user:
    get:
      tags:
        - auth
      summary: This route authenticates the user token and responds with the verified user's data
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '500':
          description: Internal Server Error
      security:
        - BearerAuth: []

  # Sellers route
  /sellers/register:
    post:
      tags:
        - seller
      summary: Onboards a user as a seller on the plartform
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Seller'
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
        '500':
          description: Internal Server Error
      security:
        - BearerAuth: []
  /sellers/verify:
    post:
      tags:
        - seller
      summary: Verify a seller (Admin Only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sellerId
              properties:
                sellerId:
                  type: string
                  description: The ID of the seller to be verified
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized - Only admins can access this route
        '404':
          description: Seller not found
        '500':
          description: Internal Server Error
      security:
        - BearerAuth: []

  # cars route
  /cars:
    post:
      tags:
        - car
      summary: Listing a new car (Sellers only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Car' # Reference to the Car schema
      responses:
        '201':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal Server Error
      security:
        - BearerAuth: []

components:
  schemas:
    User:
      type: object
      required:
        - email
        - password
      properties:
        username:
          type: string
          description: A unique username for authentication
        password:
          type: string
          description: A secure password for authentication
        email:
          type: string
          description: A unique email for authentication
        account_type:
          type: string
          description: Specifies the type of user
        fullname:
          type: string
          description: First and lastname of the user seperated by a space
    Seller:
      type: object
      required:
        - storeName
        - state
        - town
        - street
        - country
        - phone
      properties:
        storeName:
          type: string
          description: A unique name for sellers store 
        state:
          type: string
          description: State your store could be found
        town:
          type: string
          description: Town
        street:
          type: string
          description: Street
        country:
          type: string
          description: Country of operation
        zipCode:
          type: string
          description: Zip code of operation
        other:
          type: string
          description: Additional details of the location
        phone:
          type: string
          description: Phone number of the seller
    Car:
      type: object
      required:
        - name
        - model
        - category
        - sellingPrice
        - costPrice
        - condition
        - shortDescription
        - longDescription
        - year
        - color
        - mileage
        - make
        - quantity
      properties:
        name:
          type: string
          description: The name of the car
        model:
          type: string
          description: The model of the car
        category:
          type: string
          description: The category of the car
        sellingPrice:
          type: number
          description: The selling price of the car
        costPrice:
          type: number
          description: The cost price of the car
        condition:
          type: string
          description: The condition of the car
        shortDescription:
          type: string
          description: A short description of the car
        longDescription:
          type: string
          description: A long description of the car
        year:
          type: string
          description: The year of the car
        color:
          type: string
          description: The color of the car
        mileage:
          type: string
          description: The mileage of the car
        make:
          type: string
          description: The make of the car
        quantity:
          type: integer
          description: The quantity of the car available
        discount:
          type: number
          description: The discount on the car (optional)
        discountType:
          type: string
          description: The type of discount (optional)
        image:
          type: string
          description: The image of the car

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      name: BearerAuth
      in: header
